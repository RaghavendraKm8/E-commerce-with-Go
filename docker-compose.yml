version: "3.9"

services:
  db:
    image: postgres:16
    container_name: ecom_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  usersvc:
    build:
      context: ./services/usersvc
      dockerfile: Dockerfile
    container_name: usersvc
    ports:
      - "8081:8081"
    environment:
      - PG_URL=postgres://postgres:postgres@db:5432/usersvc?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  productsvc:
    build:
      context: ./services/productsvc
      dockerfile: Dockerfile
    container_name: productsvc
    ports:
      - "8082:8082"
    environment:
      - PG_URL=postgres://postgres:postgres@db:5432/productsvc?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

  ordersvc:
    build:
      context: ./services/ordersvc
      dockerfile: Dockerfile
    container_name: ordersvc
    ports:
      - "8083:8083"
    environment:
      - PG_URL=postgres://postgres:postgres@db:5432/ordersvc?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
      usersvc:
        condition: service_healthy
      productsvc:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata: {}
